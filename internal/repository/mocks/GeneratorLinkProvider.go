// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "staffinc/internal/model/entity"

	mock "github.com/stretchr/testify/mock"

	repository "staffinc/internal/repository"

	time "time"
)

// GeneratorLinkProvider is an autogenerated mock type for the GeneratorLinkProvider type
type GeneratorLinkProvider struct {
	mock.Mock
}

// GetGeneratorLinkByUserId provides a mock function with given fields: ctx, userId
func (_m *GeneratorLinkProvider) GetGeneratorLinkByUserId(ctx context.Context, userId int64) ([]entity.GeneratorLink, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetGeneratorLinkByUserId")
	}

	var r0 []entity.GeneratorLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.GeneratorLink, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.GeneratorLink); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.GeneratorLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementCount provides a mock function with given fields: ctx, tx, code
func (_m *GeneratorLinkProvider) IncrementCount(ctx context.Context, tx repository.TxProvider, code string) error {
	ret := _m.Called(ctx, tx, code)

	if len(ret) == 0 {
		panic("no return value specified for IncrementCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxProvider, string) error); ok {
		r0 = rf(ctx, tx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertGeneratorLink provides a mock function with given fields: ctx, tx, userId, code, expiredAt
func (_m *GeneratorLinkProvider) InsertGeneratorLink(ctx context.Context, tx repository.TxProvider, userId int64, code string, expiredAt time.Time) error {
	ret := _m.Called(ctx, tx, userId, code, expiredAt)

	if len(ret) == 0 {
		panic("no return value specified for InsertGeneratorLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxProvider, int64, string, time.Time) error); ok {
		r0 = rf(ctx, tx, userId, code, expiredAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LockGetGeneratorLinkByCode provides a mock function with given fields: ctx, tx, code
func (_m *GeneratorLinkProvider) LockGetGeneratorLinkByCode(ctx context.Context, tx repository.TxProvider, code string) (entity.GeneratorLink, error) {
	ret := _m.Called(ctx, tx, code)

	if len(ret) == 0 {
		panic("no return value specified for LockGetGeneratorLinkByCode")
	}

	var r0 entity.GeneratorLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxProvider, string) (entity.GeneratorLink, error)); ok {
		return rf(ctx, tx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxProvider, string) entity.GeneratorLink); ok {
		r0 = rf(ctx, tx, code)
	} else {
		r0 = ret.Get(0).(entity.GeneratorLink)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.TxProvider, string) error); ok {
		r1 = rf(ctx, tx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGeneratorLinkProvider creates a new instance of GeneratorLinkProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeneratorLinkProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeneratorLinkProvider {
	mock := &GeneratorLinkProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
