// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	repository "staffinc/internal/repository"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// TransactionProvider is an autogenerated mock type for the TransactionProvider type
type TransactionProvider struct {
	mock.Mock
}

// NewTransaction provides a mock function with given fields: ctx, opts
func (_m *TransactionProvider) NewTransaction(ctx context.Context, opts *sql.TxOptions) (repository.TxProvider, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for NewTransaction")
	}

	var r0 repository.TxProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (repository.TxProvider, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) repository.TxProvider); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.TxProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionProvider creates a new instance of TransactionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionProvider {
	mock := &TransactionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
